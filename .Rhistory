}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
check_package <- function(pkgName) {if(!require("pkgName")){
install.packages("pkgName")
}}
check_package("clipr")
install.packages("pkgName")
check_package <- function("pkgName") {if(!require("pkgName")){
check_package <- function("pkgName") {if(!require("pkgName")){
check_package <- function(pkgName) {if(!require("pkgName")){
install.packages("pkgName")
}}
check_package("clipr")
install.packages(pkgName)
# 測試
check_package <- function(pkgName) {if(!require(pkgName)){
install.packages(pkgName)
}}
check_package <- function(pkgName) {if(!require(pkgName)){
install.packages(pkgName)
}}
check_package("clipr")
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
knitr::opts_chunk$set(echo = TRUE)
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
install.packages("clipr")
library("clipr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("SOAR")
library("SOAR", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
View(weather_next36hours)
if(!exists("weather_next36hours"))
if(!exists("weather_next36hours"))
rm(weather_next36hours)
rm(weather_next36hours)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
system.time(
askSilly_weather("新北市",today())
)
(lubridate)
library("lubridate")
system.time(
askSilly_weather("新北市",today())
)
askSilly_weather <- function(locationInput,dateInput){
if(!require("jsonlite")){
install.packages("jsonlite")}
library(stringr)
if(str_detect(locationInput,"台")){
str_replace(locationInput,"台","臺")->locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
askSilly_weather("台北市",today())
system.time(
askSilly_weather("新北市",today())
)
system.time(
askSilly_weather("臺北市",today())
)
system.time(
askSilly_weather("新北市",today())
)
system.time(
askSilly_weather("臺北市",today())
)
askSilly_weather("新北市",today())
askSilly_weather("臺北市",today())
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
(n %% 2)==1 # 表示「奇數」; 或...
as.logical(n %% 2) # 只有0會變F，其他數值都是T
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
##沒有分歧情境
只有一個交卷時間：
##沒有分歧情境 只有一個交卷時間：
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
tpe_highSchools
Sys.setlocale(locale="zh_TW.UTF-8")
levels(tpe_highSchools) <- c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
tpe_highSchools
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(高?級?中?學?)$"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
str_split(data228$檔號,"/")
data228$附註
(data228$附註=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊") ->
pick_document # 要/不要
data228$檔號[pick_document]
(data228$附註=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊") ->
pick_document # 要/不要
data228$檔號[pick_document] %>%
unique() ->
doc_number
(data228$檔號==doc_number) ->
pick_document # 要/不要
data228$個人名稱[pick_document] %>%
unique() -> victims
# victims
# remove na
pick_notNa <- !is.na(data228$個人名稱)
map(data228, ~.x[ pick_notNa]) -> data228
victims[[1]]
(data228$個人名稱==victims[[1]]) -> pick_victim1 # 要/不要 吳允忠
(data228$個人名稱==victims[[2]]) -> pick_victim2
map(victims, ~(data228$個人名稱==.x)) -> pick_victims
length(unique(data228$檔號[pick_victims[[1]]])) # equivalent to  sum(pick_victims[[1]])
length(unique(data228$檔號[pick_victims[[2]]]))
length(unique(data228$檔號[pick_victims[[3]]]))
map(pick_victims, ~length(unique(data228$檔號[.x]))) -> list_counts
unlist(list_counts) -> documentCount_eachVictim
names(documentCount_eachVictim) <- victims
head(documentCount_eachVictim)
sort(documentCount_eachVictim, decreasing = T) -> documentCount_eachVictim
head(documentCount_eachVictim)
pick_victims
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
studentIds <- c("410873029", "410773005", "410772035", "410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds, "(107|108)")
str_view_all(studentIds, "107|108")  # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
str_detect(studentIds, "107|108")
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
surface_A <- 1300
# surface_A
class(surface_A)
surface_A <- 1300L
class(surface_A)
surface_A
class(surface_A)
surface_A <- 1300L
surface_cube <- function(a,b,c){
surface <- a*b*2+b*c*2+a*c*2
return(surface)
}
surface_cube <- function(a,b,c){
surface <- a*b*2+b*c*2+a*c*2
return(surface)
}
# surface_cube
surface_cube(20,10,15)
surface_cube(20,10,15)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
Mask[[1]]
View(Mask)
Mask[[1]]
Mask
Mask[[1]]
Mask[[1]]
Mask[[1]][[1]]
Mask[[1]][[2]]
Mask[[1]][[1]]
str_extract(Mask[[1]][[1]],"[0-9]+")
str_extract(Mask[[1]][[1]],"[0-9]+") %% 2
str_extract(Mask[[1]][[1]],"[0-9]+")
class(str_extract(Mask[[1]][[1]],"[0-9]+"))
as.integer(str_extract(Mask[[1]][[1]],"[0-9]+"))
as.integer(str_extract(Mask[[1]][[1]],"[0-9]+")) %% 2
Mask[[1]][[1]]
`1st_odd_or_even` <- as.integer(str_extract(Mask[[1]][[1]],"[0-9]+")) %% 2
# `1st_odd_or_even`
`1st_odd_or_even`
class(`1`1st_odd_or_even`)
class(`1st_odd_or_even`)
Mask[[1]][[1]]
`1st_odd_or_even` <- as.integer(str_extract(Mask[[1]][[1]],"[0-9]+")) %% 2
`1st_odd_or_even`<- as.integer(`1st_odd_or_even`)
class(`1st_odd_or_even`)
`1st_odd_or_even`
class(`1st_odd_or_even`)
`1st_odd_or_even`
length(`1st_odd_or_even`)
Mask$身分證字號[[1]]
Mask$身分證字號[[1]]
`1st_odd_or_even` <- as.integer(str_extract(Mask$身分證字號[[1]],"[0-9]+")) %% 2
`1st_odd_or_even`<- as.integer(`1st_odd_or_even`)
`1st_odd_or_even`
`1st_odd_or_even`
odd_or_even <- function(p){
`st_odd_or_even` <- as.integer(str_extract(p,"[0-9]+")) %% 2
`st_odd_or_even`<- as.integer(`st_odd_or_even`)
return(`st_odd_or_even`)
}
# odd_or_even
odd_or_even(Mask$身分證字號[[1]])
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
View(weekday_chart)
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
# 1st_next_date
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
today()
wday(today())
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
1st_next_date
today()+1
today()
today()+1
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
wday(today()
wday(today()
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]){
today()
} else {
today()+1
}
1st_next_date
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]){
today()
} else {
today()+1
} -> 1st_next_date
today()+1
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]){
today()
} else {
today()+1
} -> 1st_next_date
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]){
today()
} else {
today()+1
} -> `1st_next_date`
1st_next_date
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(Mask$身分證字號[[1]])+1]]){
today()
} else {
today()+1
} -> `1st_next_date`
`1st_next_date`
`1st_next_date`
next_date <- function(p){
chart <- list(
`雙` = c(1,3,5,7),
`單` = c(1,2,4,6)
)
chart[[odd_or_even(Mask$身分證字號[[1]])+1]]
if(wday(today()) %in% chart[[odd_or_even(p)+1]]){
today()
} else {
today()+1
} -> `next_dates`
return(`next_dates`)
}
# next_date
next_date(Mask$身分證字號[[1]])
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
View(courseStructure)
list(
year1=一年級不重覆科目名稱（class character）,
get_courses <- function(entranceYear, major)
{grades <- 1:4
grades %>%
map(
~(courseStructure$學年==(entranceYear+.x-1) &
str_detect(courseStructure$應修系級, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$科目名稱[.x])
) -> coursesOffered}
# get_courses
get_courses <- function(entranceYear, major)
{grades <- 1:4
grades %>%
map(
~(courseStructure$學年==(entranceYear+.x-1) &
str_detect(courseStructure$應修系級, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$科目名稱[.x])
) -> coursesOffered
return(coursesOffered)
}
# get_courses
get_courses(100,經濟系)
get_courses(100,經濟系1)
get_courses(100,"經濟系1")
View(courseStructure)
get_courses <- function(entranceYear, major)
{grades <- 1:4
grades %>%
map(
~(courseStructure$學年==(entranceYear+.x-1) &
str_detect(courseStructure$應修系級, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$科目名稱[.x])
) -> coursesOffered
return(coursesOffered)
}
# get_courses
get_courses(100,資工系1)
get_courses(100,資工系)
coursesOffered
get_courses(100,"資工系")
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
majors[[1]]
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
str(list_major1_allYears)
str(list_major1_allYears)
str(list_major1_allYears)
str(list_major1_allYears)
get_courses(100,"資工系")
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears
year1 <- unlist(list_major1_allYears)
year1 <- c(get_coursesAllYears(100,"經濟系"),get_coursesAllYears(101,"經濟系"),get_coursesAllYears(102,"經濟系"),get_coursesAllYears(103,"經濟系"))
get_coursesAllYears <- function(entranceYears, major){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
year1 <- c(get_coursesAllYears(100,"經濟系"),get_coursesAllYears(101,"經濟系"),get_coursesAllYears(102,"經濟系"),get_coursesAllYears(103,"經濟系"))
View(year1)
get_coursesAllYears(100,"經濟系")
