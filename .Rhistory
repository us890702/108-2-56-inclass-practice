a ** b
5*c(1,3,4)+7
str(example[c("name","height")])
print(example[c("name","birthday")])
knitr::opts_chunk$set(echo = TRUE)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
b <- 2-5
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
##當function有return時,
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
demand_return(p=1.2)
return(q_s)}
return(q_s) }
supply <-
function(p){q_s <- 0+2*p
return(q_s)
}
supply(2)
##也可寫
supply(p=2)
today()
dateInput <- today()
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
today()
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location]
[[1]]
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]]
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
##打造一個國際時間轉換機器人叫what_time_it_is，使用方式如：
what_time_it_is("Europe/Paris")
##打造一個國際時間轉換機器人叫what_time_it_is，使用方式如：
library(lubridate)
what_time_it_is("Europe/Paris")
##打造一個國際時間轉換機器人叫what_time_it_is，使用方式如：
library(lubridate)
what_time_it_is("Europe/Paris")
##打造一個國際時間轉換機器人叫what_time_it_is，使用方式如：
library(lubridate)
what_time_it_is("Europe/Paris")
lubridate::what_time_it_is("Europe/Paris")
?what_time_it_is
??what_time_it_is
now()
what_time_it_is <- function(timezone){lubridate::ymd_hms("now()",tz="timezone")}
what_time_it_is <- function(timezone){lubridate::with_tz(now(), tzone="timezone")}
##打造一個國際時間轉換機器人叫what_time_it_is，使用方式如：
library(lubridate)
what_time_it_is <- function(timezone){lubridate::with_tz(now(), tzone="timezone")}
what_time_it_is("Europe/Paris")
##它會依照你電腦目前時間, 即輸入now()得到的時間，去告訴你現在巴黎幾點。
what_time_it_is <- function(timezone){lubridate::with_tz(now(), tzone="timezone")}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(timezone){times <- lubridate::with_tz(now(), tzone="timezone")}
what_time_it_is <- function(timezone){times <- lubridate::with_tz(now(), tzone="timezone")}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(timezone){times <- lubridate::with_tz(now(), tzone=timezone)}
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
return(times)}
return(times)
what_time_it_is <- function(timezone){times <- lubridate::with_tz(now(), tzone=timezone)
return(times)
}
what_time_it_is("Europe/Paris")
class(demand_return)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
codetools::findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools)
Sys.setlocale(locale="zh_TW.UTF-8")
levels(tpe_highSchools)
length(tpe_highSchools)
regex_hs1st <- "(臺|台)?北市?立?第?一女子?高?級?中?學?"
regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(高?級?中?學?)$"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
regex_data <- "[:upper:][0-9]+[:upper:]"
regex_year <- "(?<=/)00[0-9][0-9](?=/)"
str_extract(data228$檔號, regex_data) ->data1
str_extract(data228$檔號,regex_year) ->year1
data228["全宗名編號"] <- factor(data1)
data228["年"] <- as.integer(year1)
data228$全宗名編號
data228$全宗名編號
data228[c("全宗名編號","年")]
data228$全宗名編號
data228$全宗名編號
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
regex_data <- "[:upper:][0-9]+[:upper:]"
regex_year <- "(?<=/)00[0-9][0-9](?=/)"
str_extract(data228$檔號, regex_data) ->data1
str_extract(data228$檔號,regex_year) ->year1
data228$全宗名編號
data228$全宗名編號
class(data1)
class(data1)
str_split(data228$檔號,"/")
##老師解法
str_split(data228$檔號,"/") -> split_docCode
split_docCode[[1]]
split_docCode[[1]][[1]]
map(split_docCode, ~.x[[1]])
map(split_docCode, ~.x[[1]]) -> list_docNumbers
map(split_docCode, ~.x[[1]]) -> list_docNumbers
##list_docNumbers 是一個list(用map出來的都是list)
unlist(list_docNumbers) ->docNumbers
str_split(data228$檔號,"/") -> split_docCode
split_docCode[[1]][[1]]
split_docCode[[2]][[1]]
map(split_docCode, ~.x[[1]]) -> list_docNumbers
##list_docNumbers 是一個list(用map出來的都是list)
unlist(list_docNumbers) ->docNumbers
data228$全宗名編號 <- factor(docNumbers)
map(split_docCode, ~.x[[2]]) -> list_xx
unlist(list_xx) ->xx
data228$年 <- as.integer(xx)
data228[c("全宗名編號","年")]
data228$檔號[pick_victims]
pick_victims <- data228$附註 == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"
data228$檔號[pick_victims]
unique(data228$檔號[pick_victims]) ->
victims
unique(data228$檔號[pick_victims])
unique(data228$檔號[pick_victims]) -> doc_number
data228$檔號 == doc_number -> pick_document
unique(data228$個人名稱[pick_document]) -> victims
victims
pick_victims <- data228$附註 == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"
pick_man <- data228$檔號 == "A803000000A/0036/340.2/5502.3/19/007"
data228$個人名稱[pick_victims&pick_man] -> victims
##老師解
pick_victims <- data228$附註 == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"
unique(data228$檔號[pick_victims]) -> doc_number
data228$檔號 == doc_number -> pick_document
unique(data228$個人名稱[pick_document]) -> victims
victims
length(victims)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
courseStructure$應修系級
View(data228)
knitr::opts_chunk$set(echo = TRUE)
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
check_package <- function(pkgName) {if(!require("pkgName")){
install.packages("pkgName")
}}
check_package("clipr")
install.packages("pkgName")
check_package <- function("pkgName") {if(!require("pkgName")){
check_package <- function("pkgName") {if(!require("pkgName")){
check_package <- function(pkgName) {if(!require("pkgName")){
install.packages("pkgName")
}}
check_package("clipr")
install.packages(pkgName)
# 測試
check_package <- function(pkgName) {if(!require(pkgName)){
install.packages(pkgName)
}}
check_package <- function(pkgName) {if(!require(pkgName)){
install.packages(pkgName)
}}
check_package("clipr")
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
knitr::opts_chunk$set(echo = TRUE)
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
install.packages("clipr")
library("clipr", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("SOAR")
library("SOAR", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
read_clip()
Sys.setlocale(locale="zh_TW.UTF-8")
library(clipr)
read_clip()
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
View(weather_next36hours)
if(!exists("weather_next36hours"))
if(!exists("weather_next36hours"))
rm(weather_next36hours)
rm(weather_next36hours)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
system.time(
askSilly_weather("新北市",today())
)
(lubridate)
library("lubridate")
system.time(
askSilly_weather("新北市",today())
)
askSilly_weather <- function(locationInput,dateInput){
if(!require("jsonlite")){
install.packages("jsonlite")}
library(stringr)
if(str_detect(locationInput,"台")){
str_replace(locationInput,"台","臺")->locationInput
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
askSilly_weather("台北市",today())
system.time(
askSilly_weather("新北市",today())
)
system.time(
askSilly_weather("臺北市",today())
)
system.time(
askSilly_weather("新北市",today())
)
system.time(
askSilly_weather("臺北市",today())
)
askSilly_weather("新北市",today())
askSilly_weather("臺北市",today())
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
(n %% 2)==1 # 表示「奇數」; 或...
as.logical(n %% 2) # 只有0會變F，其他數值都是T
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
##沒有分歧情境
只有一個交卷時間：
##沒有分歧情境 只有一個交卷時間：
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
